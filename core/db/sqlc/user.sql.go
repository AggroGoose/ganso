// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const addUserPermission = `-- name: AddUserPermission :one
INSERT INTO user_permissions (
    user_id,
    permission_id
) VALUES ($1, $2) RETURNING user_id, permission_id, created_at
`

type AddUserPermissionParams struct {
	UserID       string `json:"user_id"`
	PermissionID int64  `json:"permission_id"`
}

func (q *Queries) AddUserPermission(ctx context.Context, arg AddUserPermissionParams) (UserPermission, error) {
	row := q.db.QueryRowContext(ctx, addUserPermission, arg.UserID, arg.PermissionID)
	var i UserPermission
	err := row.Scan(&i.UserID, &i.PermissionID, &i.CreatedAt)
	return i, err
}

const checkUsername = `-- name: CheckUsername :one
SELECT username FROM users
WHERE username = $1
`

func (q *Queries) CheckUsername(ctx context.Context, username sql.NullString) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, checkUsername, username)
	err := row.Scan(&username)
	return username, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id
) VALUES ($1) RETURNING id, verified, banned, username, image, url, url_verified, created_at
`

func (q *Queries) CreateUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Banned,
		&i.Username,
		&i.Image,
		&i.Url,
		&i.UrlVerified,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, verified, banned, username, image, url, url_verified, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Banned,
		&i.Username,
		&i.Image,
		&i.Url,
		&i.UrlVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, verified, banned, username, image, url, url_verified, created_at FROM users 
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Banned,
		&i.Username,
		&i.Image,
		&i.Url,
		&i.UrlVerified,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, verified, banned, username, image, url, url_verified, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Verified,
			&i.Banned,
			&i.Username,
			&i.Image,
			&i.Url,
			&i.UrlVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllPermissionGroup = `-- name: RemoveAllPermissionGroup :exec
DELETE FROM user_permissions WHERE permission_id = $1
`

func (q *Queries) RemoveAllPermissionGroup(ctx context.Context, permissionID int64) error {
	_, err := q.db.ExecContext(ctx, removeAllPermissionGroup, permissionID)
	return err
}

const removeAllPermissionsUser = `-- name: RemoveAllPermissionsUser :exec
DELETE FROM user_permissions WHERE user_id = $1
`

func (q *Queries) RemoveAllPermissionsUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, removeAllPermissionsUser, userID)
	return err
}

const removeUserPermission = `-- name: RemoveUserPermission :exec
DELETE FROM user_permissions 
WHERE user_id = $1 AND permission_id = $2
`

type RemoveUserPermissionParams struct {
	UserID       string `json:"user_id"`
	PermissionID int64  `json:"permission_id"`
}

func (q *Queries) RemoveUserPermission(ctx context.Context, arg RemoveUserPermissionParams) error {
	_, err := q.db.ExecContext(ctx, removeUserPermission, arg.UserID, arg.PermissionID)
	return err
}

const updateUserImage = `-- name: UpdateUserImage :one
UPDATE users
SET image = $2
WHERE id = $1
RETURNING id, verified, banned, username, image, url, url_verified, created_at
`

type UpdateUserImageParams struct {
	ID    string         `json:"id"`
	Image sql.NullString `json:"image"`
}

func (q *Queries) UpdateUserImage(ctx context.Context, arg UpdateUserImageParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserImage, arg.ID, arg.Image)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Banned,
		&i.Username,
		&i.Image,
		&i.Url,
		&i.UrlVerified,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserIntake = `-- name: UpdateUserIntake :one
UPDATE users
SET username = $2, image = $3, verified = 'true'
WHERE id = $1
RETURNING id, verified, banned, username, image, url, url_verified, created_at
`

type UpdateUserIntakeParams struct {
	ID       string         `json:"id"`
	Username sql.NullString `json:"username"`
	Image    sql.NullString `json:"image"`
}

func (q *Queries) UpdateUserIntake(ctx context.Context, arg UpdateUserIntakeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserIntake, arg.ID, arg.Username, arg.Image)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Banned,
		&i.Username,
		&i.Image,
		&i.Url,
		&i.UrlVerified,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET username = $2
WHERE id = $1
RETURNING id, verified, banned, username, image, url, url_verified, created_at
`

type UpdateUserNameParams struct {
	ID       string         `json:"id"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserName, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Banned,
		&i.Username,
		&i.Image,
		&i.Url,
		&i.UrlVerified,
		&i.CreatedAt,
	)
	return i, err
}
